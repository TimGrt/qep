{"config":{"lang":["en"],"separator":"[\\s]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QEP 2025","text":"<p>Willkommen zum Quereinsteiger/innen Programm 2025!  </p> <p>Als kleines Projekt sollst du automatisiert die Konfiguration der Ansible Automation Platform (kurz AAP) anpassen. Die AAP bietet unter anderem ein Web-UI f\u00fcr die einfache Ausf\u00fchrung von Ansible Automatisierung. Die AAP selbst kann aber auch automatisiert werden, der Code daf\u00fcr ist als sogenanntes Playbook bereits erstellt. In einem sp\u00e4teren Schritt wirst du aber den Code (das Ansible Playbook) anpassen m\u00fcssen, dazu wirst du unter anderem das Versionskontroll-Tool Git verwenden. Du wirst also in den folgenden drei Teilen den typischen Entwickler-Workflow durchlaufen und mit vielen Tools und Prozessen in Ber\u00fchrung kommen, welche dir tagt\u00e4glich in einem DevOps-Projekt begegnen werden.</p>"},{"location":"part1/","title":"Infrastructure as Code","text":"<p>Als ersten Schritt wirst du dich auf der Weboberfl\u00e4che der Ansible Automation Platform bewegen. Hier wirst du klassische Ops-Aufgaben (Betriebsaufgaben) durchf\u00fchren, du wirst im UI einige Ressourcen erstellen, um anschlie\u00dfend einen Automatisierungsjob ausf\u00fchren zu k\u00f6nnen. Mit Code selbst kommst du erstmal nicht in Ber\u00fchrung, der ist bereits vorbereitet (vom Dev-Team), du musst jetzt aber den Entwickler-Code in der Automatisierungs-Plattform f\u00fcr dich und deine Ops-Kollegen ausf\u00fchrbar machen.</p> <p>Du wirst in der Ansible Automation Platform die folgenden Ressourcen erstellen:</p> <ul> <li>Project - Hiermit kann die AAP den Code herunterladen</li> <li>Credential - Die Automatisierung braucht Nutzernamen und Passwort</li> <li>Job-Template - Hier wird definiert was genau w\u00e4hrend der Automatisierung passieren soll</li> </ul>"},{"location":"part1/#1-projekt-erstellen","title":"1. Projekt erstellen","text":"<p>In der AAP Oberfl\u00e4che auf der linken Seite unter Resources den Punkt Projects w\u00e4hlen. Klicke oben auf den Button Add (w\u00e4hle Add Job-Template), es \u00f6ffnet sich eine Maske mit Eingabe-Feldern. Du musst lediglich die mit einem roten Sternchen markierten Felder zwingend ausf\u00fcllen, alles weitere ist optional.</p> <p>Gib deinem Projekt einen Namen, z.B. <code>QEP Repository</code>, als Organization w\u00e4hlst du <code>Default</code>.</p> <p>W\u00e4hle aus der Liste Source Control Credential Type den Punkt Git, es werden dadurch weitere Felder angezeigt.</p> <p>Im Feld Source Control URL tr\u00e4gst du die folgende Adresse ein:</p> <pre><code>https://github.com/TimGrt/qep.git\n</code></pre> <p>Tip</p> <p>Du kannst die Adresse rechts mit einem kleinen Button (In Zwischenablage kopieren) kopieren.</p> <p>Im Feld Source Control Branch/Tag/Commit den Wert <code>dev</code> eintragen.  </p> <p>Bei den Checkboxen unter Options w\u00e4hlst du Update Revision on Launch aus.</p> <p>Abschlie\u00dfend w\u00e4hlst du unten den Button Save.</p> Wozu das Ganze? <p>Ein Project in der AAP zeigt auf ein Repository, quasi einen (versionskontrollierten) Ordner mit allem Code f\u00fcr die Automatisierung. In unserem Fall liegt der gesamte Code f\u00fcr die Ansible Automatisierung in einem (\u00f6ffentlich zug\u00e4nglichen) Github Repository, die AAP zieht sich also den Code aus diesem und sorgt (durch die Auswahl der Checkbox) daf\u00fcr, dass vor jeder Ausf\u00fchrung der Automatisierung der aktuellste Stand geladen wird.</p> <p>Es wird ein Job vom Typ Source Control Update gestartet, klicke auf der linken Seite auf Jobs, du siehst den Job mit dem Status Successful.</p>"},{"location":"part1/#2-credential-erstellen","title":"2. Credential erstellen","text":"<p>Das Project (der Code) enth\u00e4lt ein sogenanntes Playbook f\u00fcr die automatisierte Konfiguration der Ansible Automation Platform (Automate the Automation ). Damit die Automatisierung ausgef\u00fchrt werden kann, muss das Tool (hier die AAP selbst) sich authentifizieren (anmelden), daf\u00fcr ist ein Nutzer-Name und Passwort notwendig, welches als Credential hinterlegt werden muss.</p> <p>In der AAP Oberfl\u00e4che auf der linken Seite unter Resources den Punkt Credentials w\u00e4hlen. Klicke oben auf den Button Add, es \u00f6ffnet sich eine Maske mit Eingabe-Feldern.</p> <p>Das neue Credential bekommt den Namen Controller Access, als Credential Type w\u00e4hlst du Red Hat Ansible Automation Platform.</p> <p>Es werden weitere Felder ge\u00f6ffnet, im Feld Red Hat Ansible Automation Platform w\u00e4hlst du die Console-URL-Adresse aus der Workshop-\u00dcbersichts-Seite (sieht \u00e4hnlich aus wie <code>https://ansible-1.xmpmg.sandbox502.opentlc.com</code>). Auch den Wert f\u00fcr Benutzername und Passwort findest du dort.</p> <p>Unter Options die Checkbox Verify SSL aktivieren!</p> <p>Abschlie\u00dfend den Save-Button verwenden.</p>"},{"location":"part1/#3-job-template-erstellen","title":"3. Job Template erstellen","text":"<p>Nachdem der Code in der AAP verf\u00fcgbar ist und das passende Credential erstellt wurde, wollen wir die Automatisierung auch ausf\u00fchren k\u00f6nnen. Dazu wird ein Job Template erstellt.  </p> <p>In der AAP Oberfl\u00e4che auf der linken Seite unter Resources den Punkt Templates w\u00e4hlen. Klicke oben auf den Button Add und Add Job Template, es \u00f6ffnet sich eine Maske mit Eingabe-Feldern.</p> <p>Die folgende Tabelle zeigt alle zu bef\u00fcllenden Felder:</p> Feld Inhalt Tipps Name <code>Controller Automation</code> Job Type <code>Run</code> Inventory <code>Workshop Inventory</code> Klicke auf die Lupe undw\u00e4hle das vorhandene Inventory. Project <code>QEP Repository</code> Klicke auf die Lupe undw\u00e4hle das passende Repository. Playbook <code>playbook_controller_automation.yml</code> W\u00e4hle das passende Playbook aus dem Drop-Down-Men\u00fc. Credentials <code>Controller Access</code> Die Category Red Hat Ansible Automation Platform w\u00e4hlen. <p>Speichert euer Job Template mit dem Button Save.</p> Wozu das Ganze? <p>In einem Job Template wird ein Automatisierungs-Run festgelegt, damit l\u00e4sst sich die Automatisierung sp\u00e4ter ausf\u00fchren (so oft wir wollen!). Dazu m\u00fcssen wir festlegen, welchen Code wollen wir ausf\u00fchren wollen. Wir verweisen also auf das Project und w\u00e4hlen daraus ein sogenantes Playbook (hier drin steht der wirkliche Code). Ebenfalls m\u00fcssen wir festlegen wo wir den Code ausf\u00fchren wollen, das steht im Inventory. Das Credential legt fest wie wir uns mit dem Zielhost (oder den vielen Zielhosts) verbinden, wir m\u00fcssen uns dort einloggen (authentifizieren).</p>"},{"location":"part1/#4-automatisierung-ausfuhren","title":"4. Automatisierung ausf\u00fchren","text":"<p>Alles ist vorbereitet, jetzt kann die Automatisierung ausgef\u00fchrt werden! W\u00e4hlt aus den Resources wieder Templates aus. Neben eurem Job Template seht ihr ein kleines Raketen-Symbol (), klickt drauf und die Automatisierung l\u00e4uft los!</p> <p>Sobald das Playbook durchgelaufen ist, ist ein weiteres Job-Template in der AAP (Ansible Automation Platform) entstanden! Unter Resources und Templates findest du jetzt ebenfalls das Job Template <code>Webserver Deployment</code>.  </p> <p>Du kannst das Playbook ausf\u00fchren mit dem kleinen Raketen-Symbol (), du wirst mit einer Abfrage (Survey) begr\u00fc\u00dft. Hier kannst du den Webserver personalisieren, allerdings nicht mit deinem eigenen Namen, das sollten wir \u00e4ndern!</p>"},{"location":"part1/#5-issue-erstellen","title":"5. Issue erstellen","text":"<p>Damit das dev-Team weiss was zu tun ist, musst du ein Issue im Github-Code-Repository erstellen. Ein Issue klingt erst einmal nach einem Fehler, aber ein Issue kann auch ein Feature-Request sein, also eine Verbesserung des bestehenden Codes.  </p> <p>\u00d6ffne den folgenden Link zum Github Repository: https://github.com/TimGrt/qep </p> <p>Klicke auf den Issues-Tab und erstelle \u00fcber den Button New Issue.  </p> <p>Warning</p> <p>Nur mit einem Github Account kannst du einen Issue erstellen! Die Anmeldung zu Github geht schnell (und f\u00fcr deine Entwicklungsaufgaben wirst du ohnehin einen Github Account brauchen).</p> <p>\u00d6ffne den folgenden Link: https://github.com/signup</p> <p></p> <p>Nutze deine Computacenter E-Mail-Adresse, w\u00e4hle ein sicheres Passwort und einen Nutzernamen (dein Nutzerk\u00fcrzel, Spitzname, etc.).</p> <p>Account ist erstellt und best\u00e4tigt? Super, dann kannst du jetzt, wie urspr\u00fcnglich geplant, den Issue im QEP-Repository erstellen, hier ist nochmal der Link, direkt zur Issue-Seite: https://github.com/TimGrt/qep/issues</p> <p>Vergib einen aussagekr\u00e4ftigen Titel und beschreibe dein gew\u00fcnschtes Feature (dein Name soll im Survey erscheinen, damit du den Webserver wie gew\u00fcnscht personalisieren kannst). Den Issue \u00fcber den Create Button unterhalb der Text-Box erstellen.</p>"},{"location":"part2/","title":"Teil 2 - Arbeiten mit Git","text":"<p>In der vorherigen \u00dcbung hast du automatisiert ein Job-Template in der Ansible Automation Platform erstellt, welches \u00fcber ein Survey (eine interaktive Abfrage) die M\u00f6glichkeit bietet, den Webserver (bzw. die vielen Webserver, es werden tats\u00e4chlich drei Webserver-Instanzen erstellt) zu personalisieren. Die Abfrage bietet aktuell nur einen einzelnen Namen an, damit auch dein Name dort auftaucht, musst du den Code selbst anpassen. Die Erstellung der Ressourcen war eine klassische Ops-Aufgabe, jetzt wirst eine Developer-Aufgabe \u00fcbernehmen. Die Code-Anpassung erfordert, dass du dich mit dem Versionskontroll-Tool Git vertraut machst, die folgenden Schritte bereiten dich und deine Entwicklungsumgebung darauf vor.</p>"},{"location":"part2/#1-vscode-entwicklungsumgebung-offnen","title":"1. VSCode Entwicklungsumgebung \u00f6ffnen","text":"<p>Um den Code anzupassen, verwendest du VScode (eine IDE = Integrated Developer Environment), dort ist alles installiert was du zur Programmierung brauchst. Keine Sorge, wirklich programmieren musst du heute gar nicht.  </p> <p>Auf der \u00dcbersichts-Seite des Workshops in der Red Hat Demo Umgebung den Link zu VS Code w\u00e4hlen, dein Trainer geht mit dir die einzelnen Schritte durch, um VSCode erstmalig einzurichten.</p>"},{"location":"part2/#2-ssh-schlusselpaar-erstellen","title":"2. SSH-Schl\u00fcsselpaar erstellen","text":"<p>Um den notwendigen Code (das Repository) herunterladen zu k\u00f6nnen und, noch wichtiger, anpassen und wieder hochladen zu k\u00f6nnen, ben\u00f6tigst du ein Schl\u00fcsselpaar.  </p> <p>\u00d6ffne ein Terminal in VSCode und gib das folgende Kommando ein:</p> <pre><code>ssh-keygen -t ed25519\n</code></pre> <p>Tip</p> <p>Kopiere dir das Kommando \u00fcber den Copy-Button rechts im Code-Fenster.</p> <p>Die Abfragen kannst du einfach mit Enter best\u00e4tigen (drei Mal best\u00e4tigen), die Ausgabe sieht in etwa so aus:</p> <pre><code>[student1@ansible-1 qep]$ ssh-keygen -t ed25519\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/home/student1/.ssh/id_ed25519):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/student1/.ssh/id_ed25519.\nYour public key has been saved in /home/student1/.ssh/id_ed25519.pub.\nThe key fingerprint is:\nSHA256:8HXsZw6mD5m6PNl6WHoiYy0B/Il+1zRHVrfcpR+rZpI student1@ansible-1.example.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|                 |\n|           .  . o|\n|   .  .   . o..o+|\n|    o  o . oo .+.|\n|     + .S  o+ o.o|\n|    . +   +=.= ..|\n|   .   o O=o. o  |\n|    . *.O.=E +   |\n|     o ==B  =    |\n+----[SHA256]-----+\n</code></pre> <p>Du hast ein neues SSH (Secure Shell) Schl\u00fcsselpaar erstellt, einen privaten Schl\u00fcssel und einen \u00f6ffentlichen Schl\u00fcssel (mit der Endung <code>.pub</code> f\u00fcr public), welchen du gefahrlos verbreiten darfst. Wir werden diesen \u00f6ffentlichen Schl\u00fcssel im n\u00e4chsten Schritt ben\u00f6tigen, du kannst ihn dir bereits einmal auf der Kommandozeile anzeigen lassen, von dort kannst du ihn gleich markieren und kopieren.</p> <pre><code>cat ~/.ssh/id_ed25519.pub\n</code></pre> Beispielausgabe <pre><code>[student1@ansible-1 qep]$ cat ~/.ssh/id_ed25519.pub\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDt+WFoUBWhs77m/784FaT+eqqavHf/Jz/+8DW04l2fP student1@ansible-1.example.com\n</code></pre>"},{"location":"part2/#3-offentlichen-schlussel-in-github-hinterlegen","title":"3. \u00d6ffentlichen Schl\u00fcssel in Github hinterlegen","text":"<p>Den \u00f6ffentlichen Schl\u00fcssel (mit der <code>.pub</code>-Endung) musst du in deinem Github-Account hinterlegen.</p> <p>Im Github-Browser-Fenster, klicke rechts oben auf dein Nutzer-Bild und w\u00e4hle Settings.  </p> <p>Auf der linken Seite (unter dem Punkt Access), klicke auf SSH and GPG keys. Noch sind keine Keys hinterlegt, klicke auf den Button New SSH key*.  </p> <p>Kopiere den Inhalt des \u00f6ffentlichen Schl\u00fcssel, als Titel kannst du QEP hinterlegen. Wenn alles eingef\u00fcgt ist, klicke unten auf den Button Add SSH key.</p> <p>Du solltest von deinem Trainer als Entwickler zum Projekt hinzugef\u00fcgt worden sein, in der folgenden Aufgabe l\u00e4dst du dir den Code auf deine Entwicklungsumgebung.</p>"},{"location":"part2/#4-vom-remote-repository-zum-lokalen-repository","title":"4. Vom Remote Repository zum lokalen Repository","text":"<p>Das Projekt vom Remote Repository herunterladen (klonen):</p> <pre><code>git clone git@github.com:TimGrt/qep.git\n</code></pre> <p>Ein neuer Ordner ist entstanden, in diesen wechseln (cd means change directory):</p> <pre><code>cd qep\n</code></pre> <p>Du bist jetzt in einem git-versionierten Ordner, pr\u00fcfe mit dem Kommando <code>git status</code>, der Output sollte folgenderma\u00dfen aussehen:</p> <pre><code>[student1@ansible-1 qep]$ git status\nOn branch dev\nYour branch is up to date with 'origin/dev'.\n\nnothing to commit, working tree clean\n</code></pre> <p>Du befindest dich auf dem <code>dev</code>-Branch. Dieser Branch ist schreibgesch\u00fctzt (lediglich \u00fcber einen Pull Request k\u00f6nnen \u00c4nderungen hinzugef\u00fcgt werden).</p> <p>Erstelle einen eigenen (lokalen) Branch mit deinem Namen, in der Form <code>feature/&lt;dein-name&gt;</code>:</p> <pre><code>git checkout -b feature/name\n</code></pre> <p>Alles korrekt?</p> <p>Hast du <code>name</code> gegen deinen eigenen Namen ausgetauscht?</p> <p>Du hast vom <code>dev</code>-Branch einen weiteren Branch abgezweigt, auf diesem wirst du deine \u00c4nderungen hinterlegen. Du kannst mit <code>git status</code> erneut pr\u00fcfen.</p> <p>Ok ,nach den ganzen Vorbereitungen kannst du im n\u00e4chsten Schritt dann endlich die Code-Anpassungen vornehmen!</p> <p>Tip</p> <p>Damit das Ganze in VScode noch etwas \u00fcbersichtlicher wird, kannst du dir den Projektordner \u00f6ffnen. Klicke im Men\u00fcband auf File und Open Folder..., w\u00e4hlen den <code>qep</code> Ordner (darin befindet sich dein versionkontrollierter Projekt-Ordner welchen du gerade erstellt hast). Jetzt siehst du im Explorer nur noch den Inhalt des Projektordners, das Ganze hat noch ein paar weitere Vorteile, dein Trainer kann dir das Ganze noch n\u00e4her erkl\u00e4ren.</p>"},{"location":"part3/","title":"Teil 3 - Update Code","text":"<p>In der vorherigen \u00dcbung hast du (automatisiert) ein Job-Template in der Automation Platform erstellt, mit einem Survey zur Personalisierung des Webservers. Damit dein Name ebenfalls in der Auswahlliste des Surveys auftaucht, muss der Code (die Listen-Variable) angepasst werden. Du durchl\u00e4ufst dabei einen typischen Entwicklungs-Workflow, du verwendest das Versionskontroll-Tool Git und (den Git-Hosting-Service) Github, zurvor hast du bereits einen Issue erstellt, wirst auf der Kommandozeile den Code nach deinen W\u00fcnschen anpassen und anschlie\u00dfend einen Merge Request (Pull Request) erstellen.</p> <pre><code>gitGraph\n   commit\n   commit\n   branch dev\n   checkout dev\n   commit\n   branch feature/name\n   checkout feature/name\n   commit id: \"Added name to attendee_list\"\n   checkout dev\n   merge feature/name\n   checkout main\n   merge dev\n   commit type:HIGHLIGHT</code></pre>"},{"location":"part3/#1-variablen-datei-anpassen","title":"1. Variablen-Datei anpassen","text":"<p>Im vorherigen Schritt hast du dir das Projekt mit dem Playbook-Code auf deine Workstations (deine Entwicklungsumgebung) kopiert und einen neuen Branch erstellt.</p> <p>F\u00fcge in der Datei <code>variables.yml</code> deinen Namen in der Liste hinzu, damit das Survey im Webserver Deployment Template diesen als Option f\u00fcr den personalisierten Webserver anbietet. Du kannst die Datei im Explorer links anklicken, sie wird im Code Editor ge\u00f6ffnet und kann dort editiert werden:</p> <p></p> <p>Die Datei ist im sog. YAML-Format (ein Datenserialisierungsformat), f\u00fcge in der Variablen <code>attendee_list</code> deinen Namen als weiteren Listeneintrag hinzu (beginnt mit einem Minus (Dash) Symbol), achte dabei auf die Einr\u00fcckung (zwei Leerzeichen vor dem Minus-Symbol)</p> <p>Inhalt der Variablen-Datei vor der Anpassung</p> <pre><code>---\n# variable file for Ansible playbooks\npackage: httpd\n\nattendee_list:\n  - Tim Gr\u00fctzmacher\n</code></pre> <p>Am Ende sollte die Datei folgenderma\u00dfen aussehen (mit eurem Namen nat\u00fcrlich):</p> <pre><code>---\n# variable file for Ansible playbooks\npackage: httpd\n\nattendee_list:\n  - Tim Gr\u00fctzmacher\n  - Eslem Bayraktar\n</code></pre>"},{"location":"part3/#2-anderung-prufen-und-commiten","title":"2. \u00c4nderung pr\u00fcfen und commiten","text":"<p>Da sich das Projekt unter Git-Versionskontrolle befindet, kannst du jede Ver\u00e4nderung \u00fcberpr\u00fcfen. Gib <code>git status</code> ein, du siehst, dass es eine \u00c4nderung in einer einzelnen Datei gibt (die von dir zuvor angepasste Datei <code>variables.yml</code>).</p> <p></p> <p>Mit dem folgendem Kommando f\u00fcgst du die ver\u00e4nderte Datei hinzu (zu deinem geplanten Commit):</p> <pre><code>git add variables.yml\n</code></pre> <p>Anschlie\u00dfend sieht der Output vom <code>git status</code> Kommando etwas anders aus:</p> <p></p> <p>Jetzt wird die \u00c4nderung commited. Damit alle weiteren Entwickler auch wissen, welche Ver\u00e4nderung am Code vorgenommen wurde, solltest du dem Commit eine entsprechende Nachricht (Message) mitgeben.</p> <pre><code>git commit -m \"Added new name to attendee_list\"\n</code></pre> <p>Tip</p> <p>Du kannst die Nachricht nat\u00fcrlich auch personalisieren, ansonsten das Kommando oben einfach kopieren, einf\u00fcgen und ausf\u00fchren.</p> <p>Eine Fehlermeldung?</p> <p>Das Kommando endet mit einer <code>Author identity unknown</code> Fehlermeldung. Das war zu erwwarten, du musst Git erst einmal sagen, wer du bist!</p> <p>Damit Git und die restlichen Entwickler auch wissen, wer die \u00c4nderung vorgenommen hat, musst du Namen und E-Mail angeben (die Fehlermeldung gibt die passenden Kommandos vor). Als E-Mail-Adresse (<code>user.email</code>) musst du die gleiche Adresse verwenden, mit welcher du dich bei Github angemeldet hast, als Name (<code>user.name</code>) Vor- und Nachname.</p> <p>Kopiere dir die beiden Kommandos aus der Fehlermeldung, passe sie entsprechend an und f\u00fchre sie einzeln aus.</p> Hilfe ben\u00f6tigt? <p>Hier sind die Kommandos noch einmal:</p> <pre><code>git config --global user.email \"you@example.com\"\n</code></pre> <p>Nutze die gleiche E-Mail-Adresse mit welcher du dich bei Github angemeldet hast!</p> <pre><code>git config --global user.name \"Your Name\"\n</code></pre> <p>Statt <code>Your Name</code> sollte nat\u00fcrlich dein richtiger Name hinterlegt werden!</p> <p>Nachdem du Git deine Identit\u00e4t mitgeteilt hast, kannst du den Commit noch einmal ausf\u00fchren. Mit der Up-Taste kannst du zum vorherigen Kommando zur\u00fcck, sobald du es erreicht hast, einfach mit Enter best\u00e4tigen.</p> <pre><code>[student1@ansible-1 qep]$ git commit -m \"Added new name to attendee_list\"\n[feature/eslem 4dea3cf] Added new name to attendee_list\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Das sieht gut aus, du hast deine \u00c4nderung lokal versionskontrolliert. Im n\u00e4chsten Schritt werden wir die \u00c4nderung im Github-Repository ver\u00f6ffentlichen.</p>"},{"location":"part3/#3-branch-veroffentlichen","title":"3. Branch ver\u00f6ffentlichen","text":"<p>Nachdem du die gew\u00fcnschten \u00c4nderungen am Code vorgenommen hast und lokal versionskontrolliert hast, muss sie jetzt auch ver\u00f6ffentlicht werden.  </p> <p>F\u00fchre das folgende Kommando aus:</p> <pre><code>git push -u origin\n</code></pre> <p>Noch eine Fehlermeldung?</p> <p>Auch das war zu erwwarten, das Remote-Repository auf Github kennt deinen Branch noch gar nicht!</p> <p>Du musst Git mitteilen, welcher Remote-Branch zu seinem lokalen Branch geh\u00f6rt (du erstellst einen sogenannten Tracking-Branch). Auch hier gibt die Fehlermeldung wieder einen L\u00f6sungsvorschlag vor, den kannst du wieder kopieren (mit Strg + C) und ausf\u00fchren.</p> Hilfe ben\u00f6tigt? <p>Hier ist das Kommando noch einmal:</p> <pre><code>git push --set-upstream origin feature/eslem\n</code></pre> <p>Bei mir hei\u00dft der Branch lokal nat\u00fcrlich anders als bei dir, hinterlege deinen eigenen Branch <code>fature/name</code>.</p> <p>Der Output gibt an, dass der Branch ver\u00f6ffentlicht wurde, unter dem folgenden Link siehst du jetzt auch im Github deinen Branch mit deinen Code-\u00c4nderungen:</p> <p>https://github.com/TimGrt/qep/branches</p>"},{"location":"part3/#4-pull-request-erstellen","title":"4. Pull Request erstellen","text":"<p>Dein Code ist fertig, jetzt muss er noch in den passenden Branch \u00fcberf\u00fchrt werden (in der AAP im Project wurde der <code>dev</code> Branch hinterlegt).  </p> <p>Im Github Projekt, klicke oben auf Pull Request und klicke auf der rechten Seite auf den gr\u00fcnen Button New pull request.  </p> <p></p> <p>Im rechten Drop-Down-Men\u00fc w\u00e4hlst du deinen Branch (der Quell-Branch), der Pfeil zeigt an dass die \u00c4nderungen in den dev-Branch \u00fcberf\u00fchrt werden sollen. Den gr\u00fcnen Button Create Pull Request verwenden.  </p> <p>Dein Trainer wird mit dir die \u00c4nderungen \u00fcberpr\u00fcfen (einen sog. Code Review) durchf\u00fchren und dann gemeinsam mergen (und eventuelle Merge Konflikte aufl\u00f6sen).</p>"}]}